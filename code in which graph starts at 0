<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: url('https://cdn.pixabay.com/photo/2022/08/31/03/24/smoke-7422330_1280.jpg') no-repeat center center fixed;
            background-size: cover;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .container {
            text-align: center;
            background: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 0 20px #ffffff80;
            width: 80%;
            max-width: 1000px;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
        }
        .search-box {
            margin-bottom: 20px;
        }
        #city {
            padding: 10px;
            border: 1px solid #ffffff;
            border-radius: 4px;
            background-color: #ffffff;
            color: black;
            transition: background-color 0.3s ease;
        }
        #city:focus {
            background-color: #e0e0e0;
            outline: none;
        }
        button {
            padding: 10px;
            background: #66b3ff;
            color: black;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
            transition: background 0.3s ease, transform 0.3s ease;
        }
        button:hover {
            background: #007bff;
            transform: scale(1.05);
        }
        .weather-info {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            margin-top: 20px;
        }
        .weather-info .day {
            margin: 10px;
            padding: 10px;
            background: #1a1a1a;
            border: 1px solid #ffffff;
            border-radius: 12px;
            width: 140px; /* Reduced width */
            text-align: center;
            cursor: pointer;
            position: relative;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            transition: transform 0.4s, box-shadow 0.4s;
        }
        .weather-info .day:hover {
            transform: scale(1.1);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.5);
        }
        .weather-info .day .summary {
            display: block;
            transition: opacity 0.3s;
        }
        .weather-info .day .details {
            display: none;
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.9);
            color: white;
            padding: 10px;
            border-radius: 12px;
            box-sizing: border-box;
            text-align: center;
            font-size: 0.9em;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            transition: opacity 0.3s;
        }
        .weather-info .day:hover .details {
            display: flex;
            opacity: 1;
        }
        .weather-info .day:hover .summary {
            opacity: 0;
        }
        .weather-info .day .summary img {
            width: 40px; /* Reduced size */
            height: 40px; /* Reduced size */
            transition: transform 0.3s;
        }
        .weather-info .day:hover .summary img {
            transform: scale(1.2);
        }
        .weather-info .day .details img {
            width: 30px; /* Reduced size */
            height: 30px; /* Reduced size */
        }
        .main-weather {
            margin-bottom: 20px;
            text-align: center;
        }
        .main-weather img {
            width: 100px;
            height: 100px;
            vertical-align: middle;
            transition: transform 0.3s;
        }
        .main-weather img:hover {
            transform: rotate(15deg);
        }
        .main-weather p {
            margin: 5px 0;
        }
        .chart-container {
            position: absolute;
            top: 80px;
            right: 30px;
            width: 400px; /* Reduced width */
            height: 200px; /* Reduced height */
            box-sizing: border-box;
            padding: 10px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 12px;
            display: none; /* Hide chart container by default */
        }
        canvas {
            width: 100% !important;
            height: 100% !important;
            border: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 id="forecast-heading">WEATHER FORECAST</h1>
        <div class="search-box" id="search-box">
            <input type="text" id="city" placeholder="Enter city name">
            <button onclick="getWeather()">Search</button>
        </div>
        <div id="main-weather" class="main-weather"></div>
        <div class="weather-info" id="weather-info">
            <!-- Weather data will be displayed here -->
        </div>
        <div class="chart-container" id="chart-container">
            <canvas id="weather-chart"></canvas>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const apiKey = '5c4170cf05b21adebb52da61301c97fd'; // Replace with your actual OpenWeatherMap API key

        async function getWeather() {
            const city = document.getElementById('city').value;
            if (!city) {
                alert('Please enter a city name');
                return;
            }

            const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`;
            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.cod !== '200') {
                    alert(data.message);
                    return;
                }

                // Hide search box and show weather data
                document.getElementById('forecast-heading').style.display = 'none';
                document.getElementById('search-box').style.display = 'none';
                document.getElementById('chart-container').style.display = 'block'; // Show chart container

                displayWeather(data);
                renderChart(data);
            } catch (error) {
                alert('Failed to fetch weather data');
            }
        }

        function displayWeather(data) {
            const weatherInfoDiv = document.getElementById('weather-info');
            const mainWeatherDiv = document.getElementById('main-weather');
            weatherInfoDiv.innerHTML = '';
            mainWeatherDiv.innerHTML = '';

            const city = data.city.name;
            const country = data.city.country;
            const currentWeather = data.list[0];
            const mainTemp = Math.round(currentWeather.main.temp); // Rounded temperature
            const mainWeather = currentWeather.weather[0].main;
            const mainWeatherDescription = currentWeather.weather[0].description;
            const mainWeatherIcon = `https://openweathermap.org/img/wn/${currentWeather.weather[0].icon}.png`;
            const mainWindSpeed = currentWeather.wind.speed;
            const mainHumidity = currentWeather.main.humidity;
            const searchDateStr = data.list[0].dt_txt.split(' ')[0]; // The date of the searched day
            const searchDate = new Date(searchDateStr);
            searchDate.setDate(searchDate.getDate() + 1); // Move to the next day
            const searchDateStrNextDay = searchDate.toISOString().split('T')[0]; // Date for the next day

            mainWeatherDiv.innerHTML = `
                <h2>${city}, ${country}</h2>
                <p><strong>${new Date().toLocaleDateString(undefined, { weekday: 'short', day: 'numeric', month: 'short' })} | ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</strong></p>
                <p><img src="${mainWeatherIcon}" alt="${mainWeather}"> <span><strong>${mainTemp}°C</strong></span></p>
                <p><strong>${mainWeatherDescription.charAt(0).toUpperCase() + mainWeatherDescription.slice(1)}</strong></p>
                <p><strong>Wind:</strong> ${mainWindSpeed} m/s</p>
                <p><strong>Humidity:</strong> ${mainHumidity}%</p>
            `;

            // Get the next 5 days of weather data, starting from the day after the searched day
            const fiveDays = Array.from({ length: 5 }, (_, i) => {
                const futureDate = new Date(searchDate);
                futureDate.setDate(futureDate.getDate() + i);
                return futureDate.toISOString().split('T')[0]; // Format as YYYY-MM-DD
            });

            fiveDays.forEach((date) => {
                const dailyWeather = data.list.find(item => item.dt_txt.startsWith(date));
                if (dailyWeather) {
                    const temp = Math.round(dailyWeather.main.temp); // Rounded temperature
                    const weather = dailyWeather.weather[0].main;
                    const weatherIcon = `https://openweathermap.org/img/wn/${dailyWeather.weather[0].icon}.png`;

                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'day';
                    dayDiv.innerHTML = `
                        <div class="summary">
                            <p><strong>${new Date(date).toLocaleDateString(undefined, { weekday: 'short', day: 'numeric', month: 'short' })}</strong></p>
                            <img src="${weatherIcon}" alt="${weather}">
                            <p><strong>${temp}°C</strong></p>
                        </div>
                        <div class="details">
                            <p><strong>Humidity:</strong> ${dailyWeather.main.humidity}%</p>
                            <img src="${weatherIcon}" alt="${weather}">
                            <p><strong>Wind:</strong> ${dailyWeather.wind.speed} m/s</p>
                        </div>
                    `;

                    weatherInfoDiv.appendChild(dayDiv);
                }
            });
        }

        function renderChart(data) {
            const chartCanvas = document.getElementById('weather-chart').getContext('2d');
            const chartLabels = [];
            const chartTemps = [];

            // Get the searched date
            const searchDateStr = data.list[0].dt_txt.split(' ')[0]; // The date of the searched day
            const searchDate = new Date(searchDateStr).toISOString().split('T')[0];

            // Filter hourly data for the searched date
            const hourlyData = data.list.filter(item => item.dt_txt.startsWith(searchDate));

            hourlyData.forEach(item => {
                const date = new Date(item.dt_txt);
                const temp = Math.round(item.main.temp);

                chartLabels.push(`${date.getHours()}:00`);
                chartTemps.push(temp);
            });

            new Chart(chartCanvas, {
                type: 'line',
                data: {
                    labels: chartLabels,
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: chartTemps,
                        borderColor: '#66b3ff',
                        backgroundColor: 'rgba(102, 179, 255, 0.2)',
                        fill: true,
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Hour'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Temperature (°C)'
                            }
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>
